{"version":3,"sources":["Components/Frame/index.js","Components/Picture/index.js","App.js","serviceWorker.js","index.js"],"names":["frameStyle","display","margin","gridColumnGap","Frame","props","react_default","a","createElement","Fragment","className","style","id","children","Picture","src","image","alt","onClick","clickPic","App","state","pics","monsters","score","TopScore","Monsters","clickState","selections","_this","currScore","topScore","remaining","evaluate","shuffle","setState","Score","arr","sort","Math","random","this","includes","push","endCondition","_this2","Components_Frame","map","monster","num","Components_Picture","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEMA,SAAa,CACjBC,QAAS,OACTC,OAAQ,8BACRC,cAAe,WAeFC,MAZf,SAAeC,GACb,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,OAAKG,MAAOX,EAAYY,GAAG,SACxBP,EAAMQ,aCEFC,MAbf,SAAiBT,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,OACEE,UAAU,gBACVK,IAAKV,EAAMW,MAAMA,MACjBC,IAAKZ,EAAMW,MAAMJ,GACjBM,QAAS,kBAAMb,EAAMc,SAASd,EAAMW,MAAMJ,gBCwEnCQ,6MA1EbC,MAAQ,CACNC,KAAMC,EACNC,MAAO,EACPC,SAAU,EACVC,SAAU,MAGZC,WAAa,CACXC,WAAYC,EAAKR,MAAMK,SACvBI,UAAWD,EAAKR,MAAMG,MACtBO,SAAUF,EAAKR,MAAMI,SACrBO,UAAW,MAGbb,SAAW,SAAAP,GACTiB,EAAKI,SAASrB,GAEd,IAAIU,EAAOO,EAAKK,QAAQL,EAAKR,MAAMC,MAEnCO,EAAKM,SAAS,CACZb,KAAMA,EACNE,MAAOK,EAAKF,WAAWG,UACvBM,MAAOP,EAAKF,WAAWI,SACvBL,SAAUG,EAAKF,WAAWC,qFAItBS,GACNA,EAAIC,KAAK,kBAAMC,KAAKC,SAAW,sCAGxB5B,GACH6B,KAAKd,WAAWC,WAAWc,SAAS9B,IACtC6B,KAAKd,WAAWC,WAAa,GACzBa,KAAKd,WAAWG,UAAYW,KAAKd,WAAWI,WAC9CU,KAAKd,WAAWI,SAAWU,KAAKd,WAAWG,WAE7CW,KAAKd,WAAWG,UAAY,IAE5BW,KAAKd,WAAWC,WAAWe,KAAK/B,GAChC6B,KAAKd,WAAWG,YAChBW,KAAKd,WAAWK,aAElBS,KAAKG,sDAI6B,IAA9BH,KAAKd,WAAWK,YAClBS,KAAKd,WAAa,CAChBC,WAAY,GACZE,UAAW,EACXC,SAAU,GACVC,UAAW,qCAKR,IAAAa,EAAAJ,KACP,OACEnC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACsC,EAAD,CAAOtB,MAAOiB,KAAKpB,MAAMG,MAAOC,SAAUgB,KAAKpB,MAAMI,UAClDgB,KAAKpB,MAAMC,KAAKyB,IAAI,SAACC,EAASC,GAAV,OACnB3C,EAAAC,EAAAC,cAAC0C,EAAD,CAASC,IAAKF,EAAKjC,MAAOgC,EAAS7B,SAAU0B,EAAK1B,wBAjEhDiC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c7070536.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst frameStyle = {\r\n  display: \"grid\",\r\n  margin: \"1.5rem 0.1rem 1.5rem 0.1rem\",\r\n  gridColumnGap: \"0.6rem\"\r\n};\r\n\r\nfunction Frame(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container\">\r\n        <div style={frameStyle} id=\"frame\">\r\n          {props.children}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Frame;\r\n","import React from \"react\";\r\n\r\nfunction Picture(props) {\r\n  return (\r\n    <div className=\"card-panel\">\r\n      <img\r\n        className=\"monster-image\"\r\n        src={props.image.image}\r\n        alt={props.image.id}\r\n        onClick={() => props.clickPic(props.image.id)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Picture;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Frame from \"./Components/Frame\";\nimport Picture from \"./Components/Picture\";\nimport monsters from \"./monsters.json\";\n\nclass App extends Component {\n  state = {\n    pics: monsters,\n    score: 0,\n    TopScore: 0,\n    Monsters: []\n  };\n\n  clickState = {\n    selections: this.state.Monsters,\n    currScore: this.state.score,\n    topScore: this.state.TopScore,\n    remaining: 20\n  };\n\n  clickPic = id => {\n    this.evaluate(id);\n\n    let pics = this.shuffle(this.state.pics);\n\n    this.setState({\n      pics: pics,\n      score: this.clickState.currScore,\n      Score: this.clickState.topScore,\n      Monsters: this.clickState.selections\n    });\n  };\n\n  shuffle(arr) {\n    arr.sort(() => Math.random() - 0.5);\n  }\n\n  evaluate(id) {\n    if (this.clickState.selections.includes(id)) {\n      this.clickState.selections = [];\n      if (this.clickState.currScore > this.clickState.topScore) {\n        this.clickState.topScore = this.clickState.currScore;\n      }\n      this.clickState.currScore = 0;\n    } else {\n      this.clickState.selections.push(id);\n      this.clickState.currScore++;\n      this.clickState.remaining--;\n    }\n    this.endCondition();\n  }\n\n  endCondition() {\n    if (this.clickState.remaining === 0) {\n      this.clickState = {\n        selections: [],\n        currScore: 0,\n        topScore: 20,\n        remaining: 0\n      };\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <main>\n          <div className=\"row\">\n            <Frame score={this.state.score} TopScore={this.state.TopScore}>\n              {this.state.pics.map((monster, num) => (\n                <Picture key={num} image={monster} clickPic={this.clickPic} />\n              ))}\n            </Frame>\n          </div>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}